# -*- coding: utf-8 -*-
"""data process.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Y5HxewfMgGjyvuOcOjYIu92onyCi16r
"""

# Commented out IPython magic to ensure Python compatibility.
import os
from torch.utils.data import DataLoader
import torch
import torchvision
from matplotlib.pyplot import imshow
from torchvision.io import read_image
import torchvision.transforms as T
from torchvision import datasets, transforms
import PIL
import numpy as np
from matplotlib import image as img
# %matplotlib inline
from matplotlib import pyplot as plt
import pandas as pd
from scipy.cluster.vq import whiten
import sklearn
from sklearn.cluster import KMeans

# create the color palette
color_list = {'White':[255,255,255],
              'Grey':[128,128,128],'Blue':[0,0,254],'Brown':[150,75,0],'Red':[255,0,0],'Black':[0,0,0],'Green':[0,255,0],'Cyan':[64,244,208],'Purple':[134,1,175],'Orange':[255,165,0],'Yellow':[255,255,0],'Pink':[255,105,180]}

color_list.update((key, [x / 255 for x in value]) for key, value in color_list.items())

def get_color(label_count):

  for i in range(0,9):
    # get most frequent lebels and the center of that cluster
    most_label = label_count.idxmax()[0]
    most_center = centers[most_label]

    label = compare_color(most_center)
    # print(most_center,label)
    if label != 'White':
      break
    else:
      label_count = label_count[1:]

  return(label)

def compare_color(center):
  min = 2**64
  col_lab = "error"
  for i,key in enumerate(color_list):

    dist = np.linalg.norm(np.subtract(color_list.get(key),center))
    if dist < min:
      min = dist
      col_lab = key
    
  return col_lab

color = []
file = []
# get image
for fn in os.listdir('/content/drive/MyDrive/GAN/datasets/test'):
  image = img.imread(r'/content/drive/MyDrive/GAN/datasets/test/' + fn)

  # create dataset for pixels
  r = []
  g = []
  b = []
  for line in image:
    for pixel in line:
      temp_r, temp_g, temp_b = pixel
      r.append(temp_r)
      g.append(temp_g)
      b.append(temp_b)

  df = pd.DataFrame({'red': r,'green': g,'blue': b})

  # get scaled for K means (Useless?)
  df_scaled = pd.DataFrame({'scaled_red':[],'scaled_green':[],'scaled_blue':[]})
  # df_scaled['scaled_red'] = whiten(df['red'])
  # df_scaled['scaled_green'] = whiten(df['green'])
  # df_scaled['scaled_blue'] = whiten(df['blue'])
  df_scaled['scaled_red'] = 255*df['red']
  df_scaled['scaled_green'] = 255*df['green']
  df_scaled['scaled_blue'] = 255*df['blue']

  # K Means cluster
  kmeans = KMeans(n_clusters=12, random_state=0).fit(df)

  # get cluster centers
  centers = kmeans.cluster_centers_
  # centers = [x / 255 for x in centers]

  # get dominant colors
  label_count = pd.DataFrame(kmeans.labels_).value_counts()

  # return most dominant(if white, skip)
  color.append(get_color(label_count))
  file.append(str(fn))

trans = pd.DataFrame({'file':file, 'color':color})

import shutil 
import os

lables = trans
labels = trans.sort_values('color')

class_names = list(labels.color.unique())
for i in class_names:
    os.makedirs(os.path.join('testdata',i))

for c in class_names: # Category Name
  for i in list(labels[labels['color']==c]['file']): # Image Id
    get_image = os.path.join('/content/drive/MyDrive/GAN/datasets/test/', i) # Path to Images
    move_image_to_cat = shutil.move(get_image, 'testdata/'+c)